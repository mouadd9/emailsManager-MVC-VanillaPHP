# PHP OOP and MVC Architecture Guide

## 1. Object-Oriented Programming (OOP) in PHP

### Class Definition
```php
class EmailValidator {
    // Properties (attributes)
    private $email;
    
    // Constructor
    public function __construct($email) {
        $this->email = $email;
    }
    
    // Methods
    public function validate() {
        return filter_var($this->email, FILTER_VALIDATE_EMAIL);
    }
}
```

### Key OOP Concepts in PHP:
- **Encapsulation**: Use private/protected/public modifiers
- **Inheritance**: Use `extends` keyword
- **Interfaces**: Use `interface` keyword and `implements`
- **Namespaces**: Use `namespace` to organize code

## 2. MVC Architecture in PHP

### Structure:
```
Email-Management/
├── src/
│   ├── Models/         # Data and business logic
│   ├── Views/          # Templates and presentation
│   ├── Controllers/    # Request handling
│   └── Services/       # Business logic layer
├── public/            # Public assets
└── config/           # Configuration files
```

### Layers Explanation:

1. **Models (Data Layer)**
   - Handle data logic
   - Interact with database
   - Example: `EmailModel.php`

2. **Views (Presentation Layer)**
   - Handle display logic
   - Use PHP templates
   - Example: `email-list.php`

3. **Controllers (Control Layer)**
   - Handle user input
   - Process requests
   - Example: `EmailController.php`

4. **Services (Business Layer)**
   - Complex business logic
   - Reusable operations
   - Example: `EmailService.php`

### Flow:
1. Request → Controller
2. Controller → Service
3. Service → Model
4. Model → Database
5. Results flow back up
6. Controller → View
7. View → User

### Example Code Structure:

```php
// Model
class EmailModel {
    private $pdo;
    
    public function getEmails() {
        // Database operations
    }
}

// Service
class EmailService {
    private $emailModel;
    
    public function validateAndSaveEmail($email) {
        // Business logic
    }
}

// Controller
class EmailController {
    private $emailService;
    
    public function handleAddEmail() {
        // Request handling
    }
}
```

## Project Classes Structure

### 1. Models
- `Email` class
  - Properties: id, emailAddress, domain, createdAt
  - Represents a single email entity

### 2. Services
- `EmailValidationService` class
  - Handles email validation logic
  - Validates email format
  - Checks for duplicates
  
- `EmailManagementService` class
  - Manages core email operations
  - Handles sorting, filtering, and grouping
  - Manages file operations

### 3. Controllers
- `EmailController` class
  - Handles HTTP requests
  - Manages form submissions
  - Coordinates between services and views

### 4. Repository
- `EmailFileRepository` class
  - Handles file I/O operations
  - Reads/writes to Emails.txt
  - Manages different output files (EmailsT.txt, adressesNonValides.txt)

### 5. Utils
- `DomainExtractor` class
  - Extracts and manages email domains
  - Groups emails by domain

### Class Relationships:
```
EmailController
    ↓
EmailManagementService ← EmailValidationService
    ↓
EmailFileRepository
    ↓
Email (Model)
```

### Key Responsibilities:

1. **Email (Model)**
   - Store email data
   - Basic validation rules

2. **EmailValidationService**
   - Client-side validation
   - Server-side validation
   - Duplicate checking
   - Invalid email detection

3. **EmailManagementService**
   - Remove duplicates
   - Sort emails
   - Calculate frequency
   - Group by domain
   - Coordinate file operations

4. **EmailController**
   - Handle form submissions
   - Display results
   - Route operations
   - Error handling

5. **EmailFileRepository**
   - File read/write operations
   - Create separate domain files
   - Manage invalid emails file
   - Handle sorted emails file

## Best Practices:
1. Single Responsibility Principle
2. Dependency Injection
3. Use autoloading (composer)
4. Keep controllers thin
5. Business logic in services
6. Data logic in models

## For Your Email Management Project:
- Models: Handle email storage/retrieval
- Services: Email validation, sorting, filtering
- Controllers: Handle form submissions, display requests
- Views: Show email lists, validation forms